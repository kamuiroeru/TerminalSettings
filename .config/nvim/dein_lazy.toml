[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_source = '''
    let g:jedi#completions_enabled = 0
    let g:jedi#show_call_signatures_delay = 100
    let g:jedi#show_call_signatures = 0
'''
on_ft = ['python']


[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']
#depends = 'deoplete.nvim'
hook_source = '''
    let g:deoplete#sources#jedi#server_timeout=100
    let g:deoplete#sources#jedi#statement_length=100

    let s:python = system("which python")[:-2]
    let g:deoplete#sources#jedi#python_path = s:python
    if split(system("python -V"), " ")[1][0] == "3"
	let g:python3_host_prog = s:python
	let g:jedi#force_py_version = 3
    else
	let g:python_host_prog = s:python
	let g:jedi#force_py_version = 2
    endif
'''


# c/c++の補完 llvmの場所が無いとだめ
[[plugins]]
repo = 'zchee/deoplete-clang'
if = 'strlen($LLVM_ROOT)'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
	let s:llvm_root = $LLVM_ROOT
	let g:deoplete#sources#clang#libclang_path = s:llvm_root . '/lib/libclang.dylib'
	let g:deoplete#sources#clang#clang_header = s:llvm_root . '/lib/clang'
	let g:deoplete#sources#clang#sort_algo = 'priority'
	let g:deoplete#sources#clang#clang_complete_database = "./build/"
'''
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']
depends = ['deoplete.nvim']

# latexの補完
[[plugins]]
repo = 'lervag/vimtex'
hook_source = '''
let g:vimtex_fold_envs = 0
" let g:vimtex_view_general_viewer = 'displayline'
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'
let g:vimtex_compiler_latexmk = {
      \ 'options' : [
      \   '-verbose',
      \   '-file-line-error',
      \   '-synctex=1',
      \   '-interaction=nonstopmode',
      \ ],
	  \ 'callback': 0
	  \ }
let g:vimtex_compiler_progname = 'nvr'
if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
endif
let g:deoplete#omni#input_patterns.tex = 
        \   '\\(?:'
        \  .   '\w*cite\w*(?:\s*\[[^]]*\]){0,2}\s*{[^}]*'
        \  .  '|\w*ref(?:\s*\{[^}]*|range\s*\{[^,}]*(?:}{)?)'
        \  .  '|hyperref\s*\[[^]]*'
        \  .  '|includegraphics\*?(?:\s*\[[^]]*\]){0,2}\s*\{[^}]*'
        \  .  '|(?:include(?:only)?|input)\s*\{[^}]*'
        \  .')'

" 保存時 、を，に 。を．に 置換する
function! _auto_replace()
    exe ":%s/、/，/ge"
    exe ":%s/。/．/ge"
    exe ":w"
endfunction
autocmd BufWrite *.tex silent! :call _auto_replace()

" ファイルが無ければ新規作成
nnoremap <silent> gf :e <cfile><cr>
'''
on_ft = ['tex', 'plaintex']


[[plugins]]
repo='wokalski/autocomplete-flow'
on_ft=['javascript']
